apiVersion: batch/v1
kind: Job
metadata:
  annotations:
    argocd.argoproj.io/sync-wave: "2"
  name: create-init-bundle
  namespace: stackrox
spec:
  template:
    spec:
      containers:
        - image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
          volumeMounts:
            - mountPath: /data
              name: bundle
          env:
            - name: ROX_CENTRAL_ENDPOINT
              value: {{ .Values.central.endpoint }} 
            - name: ROX_API_TOKEN
              value:  {{ .Values.central.token }}
            - name: ROX_BUNDLE_NAME
              value:  {{ .Values.clusterName }}
          command:
            - /bin/bash
            - -c
            - |
              #!/usr/bin/env bash
              set +x
              export NO_COLOR="True"
              # Wait for central to be ready
              attempt_counter=0
              max_attempts=20
              echo "Waiting for central to be available..."
              until $(curl -k --output /dev/null --silent --head --fail https://$ROX_CENTRAL_ENDPOINT:443); do
                  if [ ${attempt_counter} -eq ${max_attempts} ];then
                    echo "Max attempts reached"
                    exit 1
                  fi

                  printf '.'
                  attempt_counter=$(($attempt_counter+1))
                  echo "Made attempt $attempt_counter, waiting..."
                  sleep 5
              done
              echo "The central is available ..."

              curl -s -k -L -H "Authorization: Bearer $ROX_API_TOKEN" https://$ROX_CENTRAL_ENDPOINT:443/api/cli/download/roxctl-linux -o roxctl
              
              chmod +x ./roxctl

              ./roxctl --insecure-skip-tls-verify central init-bundles generate $ROX_BUNDLE_NAME  --endpoint $ROX_CENTRAL_ENDPOINT:443  --ouput /tmp/"$ROX_BUNDLE_NAME".yaml
              
              if oc get secret/sensor-tls &> /dev/null; then
                echo "cluster-init bundle has already been configured, doing nothing"
                exit 0
              else

                # Display init bundle generated
                cat /tmp/"$ROX_BUNDLE_NAME".yaml

                echo "Applying bundle"
                # No jq in container, python to the rescue
                #cat /data/bundle.json | python3 -c "import sys, json; print(json.load(sys.stdin)['kubectlBundle'])" | base64 -d | oc apply -f -

                cat /tmp/"$ROX_BUNDLE_NAME".yaml | oc apply -f -
                # Touch SecuredCluster to force operator to reconcile
                oc label SecuredCluster local-cluster cluster-init-job-status=created
                
                echo "ACS Cluster init bundle generated and applied"
              fi
          imagePullPolicy: Always
          name: apply-init-bundle
      volumes:
        - name: bundle
          emptyDir: {}
      dnsPolicy: ClusterFirst
      restartPolicy: Never
      serviceAccount: rhacs-services
      serviceAccountName: rhacs-services
      terminationGracePeriodSeconds: 30
